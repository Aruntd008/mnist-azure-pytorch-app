name: CI/CD Pipeline for PyTorch MNIST

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-train:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Install Azure ML SDK v2
      run: |
        python -m pip install --upgrade pip
        pip install azure-ai-ml azure-identity
        pip install -r model/requirements.txt

    - name: 'Az CLI login with OIDC'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Train Model on Azure ML
      run: |
        # Train the model using Azure ML compute
        cd model
        python aml_train.py \
          --subscription-id ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
          --resource-group mnist-ml-rg \
          --workspace-name mnist-pytorch-workspace \
          --compute-name mnist-cluster \
          --experiment-name mnist-pytorch-experiment \
          --epochs 10 \
          --batch-size 64
        cd ..

    - name: Deploy Model to ACI
      run: |
        # Deploy the model to Azure Container Instances
        cd model
        python aml_deploy.py \
          --subscription-id ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
          --resource-group mnist-ml-rg \
          --workspace-name mnist-pytorch-workspace \
          --model-name mnist-pytorch \
          --service-name mnist-inference-service
        cd ..

        # Get the ACI endpoint URL and set it as an environment variable
        echo "ACI_ENDPOINT=$(python -c 'import json; print(json.load(open("model/endpoint_info.json"))["scoring_uri"])')" >> $GITHUB_ENV

  build-and-push-frontend:
    needs: build-and-train
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ secrets.JFROG_URL }}
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

    - name: Build, Tag and Push Frontend Image
      env:
        IMAGE_NAME: ${{ secrets.JFROG_URL }}/${{ secrets.JFROG_REPO }}/mnist-frontend:${{ github.run_number }}
        LATEST_TAG: ${{ secrets.JFROG_URL }}/${{ secrets.JFROG_REPO }}/mnist-frontend:latest
      run: |
        jf docker build -t $IMAGE_NAME -t $LATEST_TAG ./frontend
        jf docker push $IMAGE_NAME
        jf docker push $LATEST_TAG

    - name: Publish Build Info
      env:
        JFROG_CLI_BUILD_NAME: mnist-frontend-build
        JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
      run: |
        jf rt build-collect-env
        jf rt build-add-git
        jf rt build-publish

  build-and-push-api:
    needs: build-and-train
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to JFrog
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.JFROG_URL }}
        username: ${{ secrets.JFROG_USERNAME }}
        password: ${{ secrets.JFROG_ACCESS_TOKEN }}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: ${{ secrets.JFROG_URL }}/${{ secrets.JFROG_REPO }}/mnist-api:latest

  deploy-infrastructure:
    needs: [build-and-train, build-and-push-frontend, build-and-push-api]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: 'Az CLI login with OIDC'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init
      env:
        ARM_USE_OIDC: true
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan -out=tfplan \
          -var="jfrog_url=${{ secrets.JFROG_URL }}" \
          -var="jfrog_username=${{ secrets.JFROG_USERNAME }}" \
          -var="jfrog_password=${{ secrets.JFROG_ACCESS_TOKEN }}" \
          -var="jfrog_repo=${{ secrets.JFROG_REPO }}" \
          -var="api_url=${{ env.ACI_ENDPOINT }}"
      env:
        ARM_USE_OIDC: true
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        cd infrastructure
        terraform apply -auto-approve tfplan
      env:
        ARM_USE_OIDC: true
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Output Deployment Information
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        cd infrastructure
        echo "Frontend URL: $(terraform output -raw frontend_url)"
        # Store the URL as an artifact or in GitHub environment variables if needed